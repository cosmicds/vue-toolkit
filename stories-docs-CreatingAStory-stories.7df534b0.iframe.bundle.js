"use strict";(self.webpackChunk_cosmicds_vue_toolkit=self.webpackChunk_cosmicds_vue_toolkit||[]).push([[862],{"./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??clonedRuleSet-8.use[1]!./src/stories/docs/docs.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=IBM+Plex+Serif:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'#storybook-root {\n  font-family: "IBM Plex Serif", Garamond, serif;\n  width: 90%;\n  max-width: 1000px;\n  margin: auto;\n}\n\n#storybook-root {\n  padding: 15px;\n}\n\n#storybook-root p {\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n#storybook-root ul {\n  padding-left: 30px;\n}\n\n#storybook-root h1 {\n  text-align: center;\n  padding-top: 20px;\n}\n\n#storybook-root pre {\n  display: inline;\n}\n\nimg.dep-logo {\n  height: 35px;\n}\n',"",{version:3,sources:["webpack://./src/stories/docs/docs.css"],names:[],mappings:"AAEA;EACE,8CAA8C;EAC9C,UAAU;EACV,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Serif:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap');\n\n#storybook-root {\n  font-family: \"IBM Plex Serif\", Garamond, serif;\n  width: 90%;\n  max-width: 1000px;\n  margin: auto;\n}\n\n#storybook-root {\n  padding: 15px;\n}\n\n#storybook-root p {\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n#storybook-root ul {\n  padding-left: 30px;\n}\n\n#storybook-root h1 {\n  text-align: center;\n  padding-top: 20px;\n}\n\n#storybook-root pre {\n  display: inline;\n}\n\nimg.dep-logo {\n  height: 35px;\n}\n"],sourceRoot:""}]);const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./src/stories/assets/controls.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/controls.3d1774c7.png"},"./src/stories/assets/final-splash-screen.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/final-splash-screen.cfef8411.png"},"./src/stories/assets/initial-splash-screen.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/initial-splash-screen.8964d67d.png"},"./src/stories/assets/splash-screen-text.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/splash-screen-text.563d53c4.png"},"./src/stories/assets/top-buttons.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/top-buttons.a220682f.png"},"./src/stories/docs/CreatingAStory.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CreateProject:()=>CreateProject,CreateSplash:()=>CreateSplash,ImageOpacityControls:()=>ImageOpacityControls,InformationalContentSetup:()=>InformationalContentSetup,Resources:()=>Resources,SetUpLayers:()=>SetUpLayers,TopButtonsSetup:()=>TopButtonsSetup,__namedExportsOrder:()=>__namedExportsOrder,default:()=>CreatingAStory_stories});var vue_esm_bundler=__webpack_require__("./node_modules/vue/dist/vue.esm-bundler.js"),vue_code_block_es=__webpack_require__("./node_modules/@wdns/vue-code-block/dist/vue-code-block.es.js");const CodeBlockvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"CodeBlock",props:{code:{},lang:{default:"plain"}},setup:function(__props){return function(_ctx,_cache){return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createBlock)((0,vue_esm_bundler.unref)(vue_code_block_es.Pp),{code:_ctx.code,lang:_ctx.lang,theme:"tomorrow",prismjs:""},null,8,["code","lang"])}}}),CodeBlock=CodeBlockvue_type_script_setup_true_lang_ts;CodeBlockvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"CodeBlock",description:"",tags:{},props:[{name:"code",required:!0,type:{name:"string"}},{name:"lang",required:!1,type:{name:"string"},defaultValue:{func:!1,value:'"plain"'}}],sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/CodeBlock.vue"]};const CreatingTheProjectvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"CreatingTheProject",setup:function(__props){var clone=function trimLeadingWhitespacePerLine(text){return text.replace(/^\s+/gm,"")}("\n  git clone https://github.com/cosmicds/vue-ds-template.git carina\n  cd carina");return function(_ctx,_cache){return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,[_cache[0]||(_cache[0]=(0,vue_esm_bundler.createElementVNode)("h1",null,"Example Story Creation",-1)),_cache[1]||(_cache[1]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)("Whether you've worked with Vue before or not, creating your own data story can be a tall task. In this multi-part guide, we'll show you step-by-step what it takes to recreate the "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://projects.cosmicds.cfa.harvard.edu/carina"},"Carina"),(0,vue_esm_bundler.createTextVNode)(" data story. This was one of the first Cosmic Data Stories that we created, and while relatively straightforward, will highlight most of the key points that you'll need to create your own data story.")],-1)),_cache[2]||(_cache[2]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)("First things first - before we start thinking about content, we need to set up a project! There's a decent amount of boilerplate that goes into a Vue project, so we've created the "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://github.com/cosmicds/vue-ds-template"},"CosmicDS Vue Template"),(0,vue_esm_bundler.createTextVNode)(" to help you get started. The first thing that you'll want to do is to clone that repository onto your machine and enter the directory that it creates. We'll call this example story \"carina\" - feel free to change the name if you want.")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:(0,vue_esm_bundler.unref)(clone),lang:"plain"},null,8,["code"]),_cache[3]||(_cache[3]=(0,vue_esm_bundler.createElementVNode)("p",null,"Now that we've got the Vue template on our local machine, there's a setup script that we can run that will do some more boilerplate setup tasks - things like modifying the basic page title and skeleton to match your story. You can pass the story name in kebab-case - the script will automatically take care of things like title-casing the page title, etc:",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"scripts/setup.sh carina"}),_cache[4]||(_cache[4]=(0,vue_esm_bundler.createElementVNode)("p",null,"In addition to the changes to the HTML skeleton mentioned above, this script will also:",-1)),_cache[5]||(_cache[5]=(0,vue_esm_bundler.createElementVNode)("ul",null,[(0,vue_esm_bundler.createElementVNode)("li",null,"Rename the main story component file to match your story name"),(0,vue_esm_bundler.createElementVNode)("li",null,"Remove the git folder so that your story no longer has the template's commit history")],-1)),_cache[6]||(_cache[6]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Finally, you'll need to install the necessary dependencies for the project. The project dependencies are stored in the "),(0,vue_esm_bundler.createElementVNode)("code",null,"package.json"),(0,vue_esm_bundler.createTextVNode)(" file, but you don't need to worry about that - just simply run ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"yarn"}),_cache[7]||(_cache[7]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" and the yarn package manager will read the contents of "),(0,vue_esm_bundler.createElementVNode)("code",null,"package.json"),(0,vue_esm_bundler.createTextVNode)(" and install everything for you. Whenever you want to see the current state of your story, you can run the development server using "),(0,vue_esm_bundler.createElementVNode)("code",null,"yarn serve"),(0,vue_esm_bundler.createTextVNode)(". This will let you view the story on a local URL ("),(0,vue_esm_bundler.createElementVNode)("code",null,"http://localhost:8080"),(0,vue_esm_bundler.createTextVNode)(" by default). ")],-1)),_cache[8]||(_cache[8]=(0,vue_esm_bundler.createElementVNode)("p",null,"And now you're set up! In the next guide, we'll tackle the first piece of content that users see - the splash screen!",-1))])}}}),CreatingTheProject=CreatingTheProjectvue_type_script_setup_true_lang_ts;CreatingTheProjectvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"CreatingTheProject",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/CreatingTheProject.vue"]};var _hoisted_1=["src"];const CreateSplashScreenvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"CreateSplashScreen",setup:function(__props){var initialSplashScreenURL=__webpack_require__("./src/stories/assets/initial-splash-screen.png"),splashScreenTextURL=__webpack_require__("./src/stories/assets/splash-screen-text.png"),finalSplashScreenURL=__webpack_require__("./src/stories/assets/final-splash-screen.png");return function(_ctx,_cache){var _component_v_alert=(0,vue_esm_bundler.resolveComponent)("v-alert"),_component_v_img=(0,vue_esm_bundler.resolveComponent)("v-img");return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,[_cache[4]||(_cache[4]=(0,vue_esm_bundler.createElementVNode)("h1",null,"Splash Screen setup",-1)),_cache[5]||(_cache[5]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Now that we've set up our project, it's time to create the first piece of content that users will see - the splash screen. Even if you're not familiar with the term, you've very likely seen one before. A splash screen is the initial screen that shows "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://en.wikipedia.org/wiki/Splash_screen",target:"_blank",rel:"noopener noreferrer"},"when a program is starting up"),(0,vue_esm_bundler.createTextVNode)(". We want to make a splash screen that gives the user a sense of what to expect in the story, and to build some interest in the content. ")],-1)),_cache[6]||(_cache[6]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" To get started building the splash screen, open up the main component file, which should be located at "),(0,vue_esm_bundler.createElementVNode)("code",null,"src/Carina.vue"),(0,vue_esm_bundler.createTextVNode)(". The main component has a splash screen built in that can be customized. To find the splash screen, look for the first "),(0,vue_esm_bundler.createElementVNode)("code",null,"v-overlay"),(0,vue_esm_bundler.createTextVNode)(" opening tag, and the opening "),(0,vue_esm_bundler.createElementVNode)("code",null,"div"),(0,vue_esm_bundler.createTextVNode)(" tag inside it. It should look something like this: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<v-overlay\n  :model-value="showSplashScreen"\n  absolute\n  opacity="0.6"\n  :style="cssVars"\n  id="splash-overlay"\n>\n  <div\n    id="splash-screen"\n    v-click-outside="closeSplashScreen"\n    :style="cssVars"\n  >\n',lang:"html"}),_cache[7]||(_cache[7]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" If you're not too familiar with Vue, this might seem like a lot. Basically, this is using Vuetify's "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuetifyjs.com/en/components/overlays/",target:"_blank",rel:"noopener noreferrer"},"overlay"),(0,vue_esm_bundler.createTextVNode)(" component to create an overlay to cover the screen, with the "),(0,vue_esm_bundler.createElementVNode)("code",null,"div"),(0,vue_esm_bundler.createTextVNode)(" inside containing the content of the splash screen that displays over it. The template has already set up the code that controls the splash screen opening and closing, so for this example we only need to fill in the content. ")],-1)),(0,vue_esm_bundler.createVNode)(_component_v_alert,{type:"info",variant:"tonal"},{text:(0,vue_esm_bundler.withCtx)((function(){return _cache[0]||(_cache[0]=[(0,vue_esm_bundler.createTextVNode)(" By default, the splash screen will close if a user clicks outside of it. While this is the default behavior that we recommend, if you don't want this, you can remove the "),(0,vue_esm_bundler.createElementVNode)("code",null,'v-click-outside="closeSplashScreen"',-1),(0,vue_esm_bundler.createTextVNode)(" line in the splash content div. Just make sure that you leave another way for the user to close the screen! ")])})),_:1}),_cache[8]||(_cache[8]=(0,vue_esm_bundler.createElementVNode)("p",null,"Initially, the splash screen looks like this:",-1)),(0,vue_esm_bundler.createVNode)(_component_v_img,{src:(0,vue_esm_bundler.unref)(initialSplashScreenURL)},null,8,["src"]),_cache[9]||(_cache[9]=(0,vue_esm_bundler.createElementVNode)("p",null,' Let\'s start with the obviously placeholder "Splash Screen Content". Additionally, note that the "X" button is already set up to close the splash screen. Since we\'re recreating the Carina data story in this example, let\'s update that text to be something relevant to that story. In our case, we started with ',-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"<p>Want to see in the</p>\n<p>INFRARED</p>\n<p>like JWST can?</p>\n",lang:"html"}),_cache[10]||(_cache[10]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" to emphasize that JWST can see in the infrared, outside the range of human vision. This isn't bad, but we wanted the text, and in particular the bit about infrared, to pop a bit more. To do this, head down to the "),(0,vue_esm_bundler.createElementVNode)("code",null,"<style>"),(0,vue_esm_bundler.createTextVNode)(" section of the code and add the following bit of code "),(0,vue_esm_bundler.createElementVNode)("em",null,"inside"),(0,vue_esm_bundler.createTextVNode)(" of the "),(0,vue_esm_bundler.createElementVNode)("code",null,"#splash-screen"),(0,vue_esm_bundler.createTextVNode)(" block: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"p {\n  font-family: 'Highway Gothic Narrow', 'Roboto', sans-serif;\n  font-weight: bold;\n  vertical-align: middle;\n}\n  \np.highlight {\n  color: red;\n  text-transform: uppercase;\n  font-weight: bolder;\n}\n",lang:"css"}),(0,vue_esm_bundler.createVNode)(_component_v_alert,{type:"info",variant:"tonal"},{text:(0,vue_esm_bundler.withCtx)((function(){return _cache[1]||(_cache[1]=[(0,vue_esm_bundler.createTextVNode)(" While simple CSS like this is often quite readable, if you're unfamiliar with the basics of how CSS works, we recommend the "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics",target:"_blank",rel:"noopener noreferrer"},"MDN guides",-1),(0,vue_esm_bundler.createTextVNode)(" on the basic aspects of CSS styling. ")])})),_:1}),_cache[11]||(_cache[11]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" We've set up the template to incorporate "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},"Less"),(0,vue_esm_bundler.createTextVNode)(", which uses a preprocessor step to compile into regular CSS. Less has a lot of cool features, but the one that we'll be taking most advantage of here is nesting. Simply put, this means that inner block selectors are related to the containing selectors. So writing ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"#splash-screen {\n  p {\n    // Styling here\n  }\n}\n",lang:"css"}),_cache[12]||(_cache[12]=(0,vue_esm_bundler.createElementVNode)("p",null,"using Less has the same effect as writing",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"#splash-screen p {\n  // Styling here\n}\n",lang:"css"}),_cache[13]||(_cache[13]=(0,vue_esm_bundler.createElementVNode)("p",null,"This is a really useful feature to help keep your CSS organized if there's an outer selector that you're using a lot. We recommend it!",-1)),_cache[14]||(_cache[14]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)("Additionally, in order to use our newly-added "),(0,vue_esm_bundler.createElementVNode)("code",null,"highlight"),(0,vue_esm_bundler.createTextVNode)(" class, change the splash screen title content to be")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<p>Want to see in the</p>\n<p class="highlight">INFRARED</p>\n<p>like JWST can?</p>\n',lang:"html"}),(0,vue_esm_bundler.createVNode)(_component_v_alert,{type:"info",variant:"tonal"},{text:(0,vue_esm_bundler.withCtx)((function(){return[_cache[2]||(_cache[2]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)("The font that we've set the splash screen to use by default is called "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://en.wikipedia.org/wiki/Highway_Gothic",target:"_blank",rel:"noopener noreferrer"},"Highway Gothic"),(0,vue_esm_bundler.createTextVNode)(" - in particular, we're using the Narrow variant (which, as the name suggests, you might recognize this as the font that's used on highway signs). Since this probably isn't a font that most users will have by default, we import it ourselves at the beginning of our style section:")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'@font-face {\n  font-family: "Highway Gothic Narrow";\n  src: url("./assets/HighwayGothicNarrow.ttf");\n}\n',lang:"css"}),_cache[3]||(_cache[3]=(0,vue_esm_bundler.createElementVNode)("p",null,"We include this font in the template assets by default, but you can also load a font from a remote URL. You can use this same pattern to load in any custom font that you want!",-1))]})),_:1}),_cache[15]||(_cache[15]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Finally, for the Carina story we decided to add a button to allow the user to advance past the splash screen and get started with the story. We created our button using "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuetifyjs.com/en/components/buttons/",target:"_blank",rel:"noopener noreferrer"},"Vuetify's button component"),(0,vue_esm_bundler.createTextVNode)(". Insert the following underneath the "),(0,vue_esm_bundler.createElementVNode)("code",null,"splash-screen-text"),(0,vue_esm_bundler.createTextVNode)(" div: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<div>\n  <v-btn\n    class="splash-get-started"\n    @click="closeSplashScreen"\n    :color="accentColor"\n    :density="smallSize ? \'compact\' : \'default\'"\n    size="x-large"\n    variant="elevated"\n    rounded="lg"\n  >\n    Get Started\n  </v-btn>\n</div>\n',lang:"html"}),_cache[16]||(_cache[16]=(0,vue_esm_bundler.createStaticVNode)('<p>Once again, let&#39;s break this down:</p><ul><li><code>@click=&quot;closeSplashScreen&quot;</code> means that clicking this button will close the splash screen</li><li><code>:color=&quot;accentColor&quot;</code> sets the color of the button. We&#39;ll set the <code>accentColor</code> for the button in a later step</li><li><code>:density=&quot;smallSize ? &#39;compact&#39; : &#39;default&#39;</code> controls the density, which is a property of the Vuetify button. The condition here means that we&#39;ll use the &quot;compact&quot; density on a small screen, and the &quot;default&quot; density otherwise. The <code>smallSize</code> variable keeps track of whether the user is on a &quot;small&quot; and is built in to the template (and will update as necessary if the user resizes their browser window).</li><li><code>size=&quot;x-large&quot;</code> sets the button size to be extra large</li><li><code>variant=&quot;elevated&quot;</code> tells Vuetify to give the button some <a href="https://m2.material.io/design/environment/elevation.html" target="_blank" rel="noopener noreferrer">elevation</a></li><li><code>rounded=&quot;lg&quot;</code> tells Vuetify how much to round the button. If you&#39;re familiar with CSS, this is like setting a <code>border-radius</code></li></ul><p>You should now have a splash screen that looks like the image below</p>',3)),(0,vue_esm_bundler.createElementVNode)("img",{src:(0,vue_esm_bundler.unref)(splashScreenTextURL),height:"400",width:"400"},null,8,_hoisted_1),_cache[17]||(_cache[17]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" As a final tweak, let's add a bit of color. The template has a built-in "),(0,vue_esm_bundler.createElementVNode)("code",null,"accentColor"),(0,vue_esm_bundler.createTextVNode)(" variable that gets used in a few places to set the color of various elements. Let's set it to one of the accent colors that we used for Carina. Find that variable and change its definition to the following: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'ref("#F0AB52");',lang:"javascript"}),_cache[18]||(_cache[18]=(0,vue_esm_bundler.createElementVNode)("p",null,"The splash screen should now look like this:",-1)),(0,vue_esm_bundler.createVNode)(_component_v_img,{src:(0,vue_esm_bundler.unref)(finalSplashScreenURL),height:"400",width:"400"},null,8,["src"]),_cache[19]||(_cache[19]=(0,vue_esm_bundler.createElementVNode)("p",null," This is looking pretty close to the original Carina splash screen! It's not quite a perfect match, but for our purposes this is close enough. Now, let's move on to creating the content of our data story! ",-1))])}}}),CreateSplashScreen=CreateSplashScreenvue_type_script_setup_true_lang_ts;CreateSplashScreenvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"CreateSplashScreen",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/CreateSplashScreen.vue"]};const SettingUpLayersvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"SettingUpLayers",setup:function(__props){return function(_ctx,_cache){var _component_v_alert=(0,vue_esm_bundler.resolveComponent)("v-alert");return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,[_cache[1]||(_cache[1]=(0,vue_esm_bundler.createElementVNode)("h1",null,"Setting Up Images and Camera",-1)),_cache[2]||(_cache[2]=(0,vue_esm_bundler.createElementVNode)("p",null," If you've followed along with our guide so far, you've got a working Vue project and a splash screen with some relevant content. Now, it's time to start setting up the content of the story itself. To start, we'll go through how to set up the image layers in WorldWide Telescope so that they display on the sky! ",-1)),_cache[3]||(_cache[3]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" The first thing that we'll need to set up images in WWT is what's called a "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://docs.worldwidetelescope.org/data-guide/1/data-file-formats/collections/",target:"_blank",rel:"noopener noreferrer"},"WTML file"),(0,vue_esm_bundler.createTextVNode)(", which is a XML document that WWT knows to how read to load in data. Since it's just XML, creating your own WTML files is easy. You can read the WWT Data Guide linked above if you want to create your own WTML files, but for this guide we'll use some WTMLs that already exist and have the data that we want. ")],-1)),_cache[4]||(_cache[4]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" To get started setting up the image layers and pointing the WWT camera to them, again open up "),(0,vue_esm_bundler.createElementVNode)("code",null,"src/Carina.vue"),(0,vue_esm_bundler.createTextVNode)(", and this time look for the "),(0,vue_esm_bundler.createElementVNode)("code",null,"onMounted"),(0,vue_esm_bundler.createTextVNode)(" hook inside of the JavaScript section of the template. It should look like this: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"onMounted(() => {\n  store.waitForReady().then(async () => {\n    skyBackgroundImagesets.forEach(iset => backgroundImagesets.push(iset));\n    store.gotoRADecZoom({\n      ...props.initialCameraParams,\n      instant: true\n    }).then(() => positionSet.value = true);\n\n    // If there are layers to set up, do that here!\n    layersLoaded.value = true;\n  });\n});\n",lang:"javascript"}),_cache[5]||(_cache[5]=(0,vue_esm_bundler.createStaticVNode)('<p> You can see the commented-out line recommending where to add layer setup code, and that&#39;s what we&#39;ll put in. But first, let&#39;s briefly go through what&#39;s happening here. The WWT engine needs to run a few things when it first sets up - there&#39;s default data to load, connections to set up with WWT data servers, etc. Since this all happens over the internet, we don&#39;t know exactly when this will finish. As the language of the web browser, modern JavaScript has the concept of a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferrer"><code>Promise</code></a> to represent these sorts of asynchronous operations. The WWT web engine store (which we use to access WWT&#39;s functionality) exposes a <code>waitForReady</code> promise. This promise doesn&#39;t return a value, but does let us know when WWT is ready to respond to our commands. To do something after a promise resolves, we use the promise&#39;s <code>then</code> method - basically, we&#39;re saying &quot;when you&#39;re finished, <em>then</em> do this next&quot;. So all of our camera and layer setup will happen inside of the <code>then</code> block, so that we can be sure that WWT has finished setting up. </p><p> By default, the template assumes that you have a specific location in mind that you want to go to (and we do!) But let&#39;s handle that later. To start, delete the call part of the code that goes to an initial position (<code>store.gotoRADecZoom</code> through <code>layersLoaded.value = true);</code> a few lines later). We&#39;ll do this another way later on. Also, if you scroll up a bit, find a variable named <code>props</code>. You can delete the <code>initialCameraParams</code> defaults there, along with the definition of the <code>props</code> variable (as we won&#39;t actually be referencing the props directly, so that this now looks like </p>',2)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'withDefaults(defineProps<CarinaProps>(), {\n  wwtNameSpace: "carina",\n});\n',lang:"javascript"}),_cache[6]||(_cache[6]=(0,vue_esm_bundler.createElementVNode)("p",null,"Now, we'll used WWT's API for loading image collections to add the images into our view. Add the following code after the line that sets up the sky imagesets:",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'const wtmls = {\n  jwst: "https://web.wwtassets.org/specials/2023/cosmicds-carina/collection/jwst_carina.wtml",\n  hubble: "https://web.wwtassets.org/specials/2023/cosmicds-carina/collection/carina_nebula.wtml"\n};\nconst layerPromises = Object.entries(wtmls).map(([name, url]) =>\n  store.loadImageCollection({\n    url,\n    loadChildFolders: false\n  }).then((folder) => {\n    const children = folder.get_children();\n    if (children == null) { return; }\n    const item = children[0] as Place;\n    const imageset = item.get_backgroundImageset() ?? item.get_studyImageset();\n    if (imageset === null) { return; }\n    return store.addImageSetLayer({\n      url: imageset.get_url(),\n      mode: "autodetect",\n      name,\n      goto: false\n    });\n  }));\n\nPromise.all(layerPromises).then((loadedLayers) => {\n  loadedLayers.forEach(layer => {\n    if (layer === undefined) { return; }\n    layers[layer.get_name()] = layer;\n    applyImageSetLayerSetting(layer, ["opacity", 0.5]);\n  });\n  layersLoaded.value = true;\n});\n',lang:"javascript"}),_cache[7]||(_cache[7]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)("This code used a top-level "),(0,vue_esm_bundler.createElementVNode)("code",null,"layers"),(0,vue_esm_bundler.createTextVNode)(" object so that we can use the imagesets elsewhere in the component, so somewhere outside of the "),(0,vue_esm_bundler.createElementVNode)("code",null,"onMounted"),(0,vue_esm_bundler.createTextVNode)(" hook you'll need to add")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"const layers: Record<string,ImageSetLayer> = {};",lang:"javascript"}),_cache[8]||(_cache[8]=(0,vue_esm_bundler.createElementVNode)("p",null,"Finally, we'll need to import a couple of things that we're using in the code above. Add these lines to the imports section at the top of the script portion of the template:",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'import { ImageSetLayer, Place } from "@wwtelescope/engine-pinia";\nimport { applyImageSetLayerSetting } from "@wwtelescope/engine-helpers";\n',lang:"javascript"}),_cache[9]||(_cache[9]=(0,vue_esm_bundler.createStaticVNode)("<p> Let&#39;s go over what we&#39;re doing here. First, we create a <code>wtmls</code> object that stores the URLs for our two WTML files. Here we have two separate WTML files (one for our Hubble image, the other for our JWST image), but you can store multiple imagesets in one WTML. For each key, value pair in our <code>wtmls</code> object, we load the WTML from its URL using WWT&#39;s <code>loadImageCollection</code> method. Again, as this generally requires loading from a remote location, it returns a Promise whose resolved value is a WWT <code>Folder</code> object, which is a class describing a folder of contents, similar to a folder in a filesystem. Our images are stored as WWT <code>Imageset</code>s within <code>Place</code> entries, so after the Promise resolves, we do a few checks to make sure that the items have the right structure and then use WWT&#39;s <code>addImageSetLayer</code> to add the images into WWT using the names (<code>&quot;jwst&quot;</code> and <code>&quot;hubble&quot;</code>) that we used as keys in our <code>wtmls</code> object. This method also returns a promise which we return, meaning that <code>layerPromises</code> is, as the name suggests, an array of promises. Before we do our next steps, we want to be sure that both layers have finished being set up in WWT. To do that, we use JavaScript&#39;s <code>Promise.all</code>, which takes in an array of promises and returns a promise that resolves only when all of them are complete. The resolved value will be an array whose members are the resolved values of the input promises. In our case, once all of the layers have loaded, we add them to our component-level <code>layers</code> object for access later, and set the opacity of each to 0.5 (out of 1). </p>",1)),(0,vue_esm_bundler.createVNode)(_component_v_alert,{type:"info",variant:"tonal"},{text:(0,vue_esm_bundler.withCtx)((function(){return _cache[0]||(_cache[0]=[(0,vue_esm_bundler.createTextVNode)(" Note that we haven't added any handling for what happens if the promises fail for any reason. We've omitted error handling in order to keep the tutorial simpler, but in your own story you can use the promise's "),(0,vue_esm_bundler.createElementVNode)("code",null,"catch",-1),(0,vue_esm_bundler.createTextVNode)(" method to decide how to handle any errors that pop up as you're handling data. ")])})),_:1}),_cache[10]||(_cache[10]=(0,vue_esm_bundler.createStaticVNode)("<p> With the layers loaded and set up, we now set <code>layersLoaded.value = true</code>. Why do we do this? The variables <code>layersLoaded</code> and <code>positionSet</code> are built-in variables in the template. When both of these are set to true, the <code>isReady</code> value will automatically be updated to be true. Note that these values are both Vue references (so that we can use them in the template), and so we update their stored values by setting their <code>value</code> member. Until this happens, the template has a built in &quot;Loading...&quot; screen with a small Moon GIF. Feel free to customize what you want there! </p><p> So now we&#39;ve set <code>layersLoaded</code> to be true, but we haven&#39;t handled setting the position. In addition to allowing the loading screen to pass, we also want WWT to bring the user to the right place on the sky. We&#39;re going to add a button to reset the camera later, so let&#39;s do ourselves a favor now and make this functionality that we can use in multiple places. To do this, add the following function to the top level of the component: </p>",2)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"function resetView(instant = false) {\n  const imageset = layers.jwst.get_imageSet();\n  store.gotoRADecZoom({\n    raRad: D2R * imageset.get_centerX(),\n    decRad: D2R * imageset.get_centerY(),\n    zoomDeg: 0.8595,\n    rollRad: 1.799,\n    instant,\n  });\n}",lang:"javascript"}),_cache[11]||(_cache[11]=(0,vue_esm_bundler.createElementVNode)("p",null,"Additionally, add the following near the top of the script section of the template, near the other imports:",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'import { D2R } from "@wwtelescope/astro";',lang:"javascript"}),_cache[12]||(_cache[12]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" While there's nothing wrong with setting the position \"by hand\", this code allows us to automatically grab the center position of the JWST imageset and, after converting it to radians, set the WWT camera to that RA/Dec position. The zoom and roll parameters are values that we picked manually, though. Now that we've defined this function, let's call it and let the template know that we've set our position. Below "),(0,vue_esm_bundler.createElementVNode)("code",null,"layersLoaded.value = true"),(0,vue_esm_bundler.createTextVNode)(", add the following: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"resetView(true);\npositionSet.value = true;\n",lang:"javascript"}),_cache[13]||(_cache[13]=(0,vue_esm_bundler.createElementVNode)("p",null," Now that we have code to mark both the layers and position as all set up, the user can advance through the loading screen. When the loading screen finishes, we'll have both images loaded into WWT, with the camera at the correct RA/Dec position and zoom level! With the basic view set up, we can now move on to the controls! ",-1))])}}}),SettingUpLayers=SettingUpLayersvue_type_script_setup_true_lang_ts;SettingUpLayersvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"SettingUpLayers",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/SettingUpLayers.vue"]};const OpacityControlsvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"OpacityControls",setup:function(__props){var controlsURL=__webpack_require__("./src/stories/assets/controls.png");return function(_ctx,_cache){var _component_v_alert=(0,vue_esm_bundler.resolveComponent)("v-alert"),_component_v_img=(0,vue_esm_bundler.resolveComponent)("v-img");return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,[_cache[1]||(_cache[1]=(0,vue_esm_bundler.createElementVNode)("h1",null,"Image Opacity Controls",-1)),_cache[2]||(_cache[2]=(0,vue_esm_bundler.createElementVNode)("p",null," In the previous section of our guide, we set up our Hubble and JWST images in WorldWide Telescope, and set both of them to 50% opacity. This is a good starting point for our interactive, but what we really want is for users to be able to crossfade from one image to the other and see how things change. So in this section of the guide, we'll set up the controls that allow a user to do just that. ",-1)),_cache[3]||(_cache[3]=(0,vue_esm_bundler.createElementVNode)("p",null," While we could place these controls anywhere, we find that a convenient place for these sorts of controls is near the bottom of the view, so that they only minimally block the WWT view. In fact, our template has a container already placed along the bottom for doing exactly this. Look for the following in the HTML template for the main component: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<div id="bottom-content">\n  <div id="body-logos" v-if= "!smallSize">\n    <credit-logos/>\n  </div>\n</div>\n',lang:"html"}),_cache[4]||(_cache[4]=(0,vue_esm_bundler.createElementVNode)("p",null," To start with, the only thing along the bottom is our credit logos component. You can customize the logos that appear here (see the documentation for this component), but for this story we'll use the default logos. As far as image controls go, for our Carina story we want to have three opacity control elements: ",-1)),_cache[5]||(_cache[5]=(0,vue_esm_bundler.createElementVNode)("ul",null,[(0,vue_esm_bundler.createElementVNode)("li",null,"A button for setting the JWST image to 100% opacity and the Hubble image to 0% opacity"),(0,vue_esm_bundler.createElementVNode)("li",null,"A button to do the reverse - set the Hubble image to 100% opacity and the JWST image to 0%"),(0,vue_esm_bundler.createElementVNode)("li",null,"A slider to slide between the two, with the two opacities complementary - i.e. if JWST is at X%, Hubble is at (100 - X)%")],-1)),_cache[6]||(_cache[6]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Additionally, we'll want these UI elements to be in sync - for example, if a user presses the JWST button, the slider should move all the way to the JWST end as well. To help facilitate that, let's create a reactive variable that will let Vue help us with that. There's no one right way to set this up, but for this story, let's define a variable called "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)(" that goes from 0 to 100, with 0 meaning that only the Hubble image is visible, and 100 meaning that only the JWST image is visible. Add the following at the top level of the component: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"const crossfade = ref(50);",lang:"javascript"}),_cache[7]||(_cache[7]=(0,vue_esm_bundler.createElementVNode)("p",null," And then let's have Vue hook this variable up to our imageset layer opacities. Also at the top level of the component, add: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"watch(crossfade, (value: number) => {\n   const jwstOpacity = 0.01 * value;\n   layers.jwst.set_opacity(jwstOpacity);\n   layers.hubble.set_opacity(1 - jwstOpacity);\n});\n",lang:"javascript"}),_cache[8]||(_cache[8]=(0,vue_esm_bundler.createElementVNode)("p",null,"And update the first line of the script section of the template to be",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'import { ref, reactive, computed, onMounted, nextTick, watch } from "vue";',lang:"javascript"}),_cache[9]||(_cache[9]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" This sets up a "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuejs.org/guide/essentials/watchers.html",target:"_blank",rel:"noopener noreferrer"},"watcher"),(0,vue_esm_bundler.createTextVNode)(", which is a piece of code that Vue will automatically run whenever the value of the specified reactive variable (here "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)(") is updated. What this really means is that now we can entirely control the opacities of our imagesets through "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)(", and they'll automatically have the complementary behavior that we want. ")],-1)),_cache[10]||(_cache[10]=(0,vue_esm_bundler.createElementVNode)("p",null," Now that we have a reactive way to control our opacities, let's set up our control widgets. First, let's add a container for them, above the credit logos: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<div id="bottom-content">\n   <div id="controls-container">\n   </div>\n   <div id="body-logos" v-if= "!smallSize">\n     <credit-logos/>\n   </div>\n</div>\n',lang:"html"}),_cache[11]||(_cache[11]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" The bottom content container is already set up as a flex container with "),(0,vue_esm_bundler.createElementVNode)("code",null,"flex-direction: column"),(0,vue_esm_bundler.createTextVNode)(", so the controls will automatically show up above the logos (if this doesn't mean anything to you, it's just a fancy way of saying the that bottom content container will vertically stack its top-level items). ")],-1)),_cache[12]||(_cache[12]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Now that we've got a container, let's add our first button - a button to set the current view to show only the Hubble image. There are a look of ways that we could create a button - the HTML button element, Vuetify's "),(0,vue_esm_bundler.createElementVNode)("code",null,"v-btn"),(0,vue_esm_bundler.createTextVNode)(" component, etc. To keep things simple, we'll do the most natural thing and create a "),(0,vue_esm_bundler.createElementVNode)("code",null,"button"),(0,vue_esm_bundler.createTextVNode)(" element with a click listener. Inside the "),(0,vue_esm_bundler.createElementVNode)("code",null,"controls-container"),(0,vue_esm_bundler.createTextVNode)(", add the following: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<button\n  class="ui-text slider-label"\n  @click="crossfade = 0"\n  @keyup.enter="crossfade = 0"\n  tabindex="0"\n>Hubble<br><span class="light-type">(Visible)</span>\n</button>\n',lang:"html"}),_cache[13]||(_cache[13]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" We also want to add some styling. Notice that we're applying these styles to the "),(0,vue_esm_bundler.createElementVNode)("code",null,"ui-text"),(0,vue_esm_bundler.createTextVNode)(" and "),(0,vue_esm_bundler.createElementVNode)("code",null,"slider-label"),(0,vue_esm_bundler.createTextVNode)(" classes that we assigned to the button. The "),(0,vue_esm_bundler.createElementVNode)("code",null,"slider-label"),(0,vue_esm_bundler.createTextVNode)(" styling will just be for the two buttons we're going to add now, but we'll reuse the "),(0,vue_esm_bundler.createElementVNode)("code",null,"ui-text"),(0,vue_esm_bundler.createTextVNode)(" class a few times throughout the story: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:".ui-text {\n  color: var(--accent-color);\n  background: black;\n  padding: 5px 5px;\n  border: 2px solid black;\n  border-radius: 10px;\n  font-size: calc(0.7em + 0.2vw);\n\n  &:focus {\n    color: white;\n  }\n}\n\n.slider-label {\n  font-weight: bold;\n  font-size: calc(0.8em + 0.5vw);\n  padding: 5px 10px;\n  text-align: center;\n  line-height: 20px;\n\n  .light-type {\n    font-size: calc(0.56em + 0.35vw);\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n}\n",lang:"css"}),_cache[14]||(_cache[14]=(0,vue_esm_bundler.createStaticVNode)("<p>To break down the Vue functionality a bit:</p><ul><li><code>@click=&quot;crossfade = 0&quot;</code> tells Vue to set our <code>crossfade</code> value to zero when the button is clicked</li><li><code>@keyup.enter=&quot;crossfade = 0&quot;</code> does the same thing when the Enter button is pressed when the button is focused</li><li><code>tabindex=&quot;0&quot;</code> allows the button to be tab-focusable</li></ul><p> Together the last two lines help make the controls more accessible for users who are navigating via the keyboard. </p>",3)),(0,vue_esm_bundler.createVNode)(_component_v_alert,{type:"info",variant:"tonal"},{text:(0,vue_esm_bundler.withCtx)((function(){return _cache[0]||(_cache[0]=[(0,vue_esm_bundler.createTextVNode)(" Note that when we update Vue refs in the JavaScript portion of the template, we need to update the underlying value by setting the "),(0,vue_esm_bundler.createElementVNode)("code",null,"value",-1),(0,vue_esm_bundler.createTextVNode)(" attribute of the ref, but in the template this isn't necessary. Internally, Vue will automatically translate "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade = 0",-1),(0,vue_esm_bundler.createTextVNode)(" in the template into "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade.value = 0",-1),(0,vue_esm_bundler.createTextVNode)(". ")])})),_:1}),_cache[15]||(_cache[15]=(0,vue_esm_bundler.createElementVNode)("p",null,"We can do almost the same thing for the JWST button:",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<button\n  class="ui-text slider-label"\n  @click="crossfade = 100"\n  @keyup.enter="crossfade = 100"\n  tabindex="0"\n>JWST<br><span class="light-type">(Infrared)</span>\n</button>\n',lang:"html"}),_cache[16]||(_cache[16]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)("The functionality is the same here, except now we're setting "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade = 100"),(0,vue_esm_bundler.createTextVNode)(".")],-1)),_cache[17]||(_cache[17]=(0,vue_esm_bundler.createElementVNode)("p",null," Finally, let's add the slider to allow users to adjust the crossfade between the two images. For this, we'll use Vuetify's slider component. Add the following to the template between the markup for the two buttons: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<v-slider\n  v-model="crossfade"\n  :min="0"\n  :max="100"\n  :step="1"\n  hide-details\n></v-slider>\n',lang:"html"}),_cache[18]||(_cache[18]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" The markup for the slider is pretty straightforward. "),(0,vue_esm_bundler.createElementVNode)("code",null,"min"),(0,vue_esm_bundler.createTextVNode)(" and "),(0,vue_esm_bundler.createElementVNode)("code",null,"max"),(0,vue_esm_bundler.createTextVNode)(" are the min and max values of the slider, and "),(0,vue_esm_bundler.createElementVNode)("code",null,"step"),(0,vue_esm_bundler.createTextVNode)(" is the gap between adjacent slider values. So our slider goes from 0 to 100, in increments of 1. The "),(0,vue_esm_bundler.createElementVNode)("code",null,'v-model="crossfade"'),(0,vue_esm_bundler.createTextVNode)(" line hooks up the value of the slider to our crossfade value. This means that changing the value of the slider will adjust the value of "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)(", and changing the value of crossfade somewhere else will cause the slider to update to match. ")],-1)),_cache[19]||(_cache[19]=(0,vue_esm_bundler.createElementVNode)("p",null," Finally, let's set up the layout for the controls. To keep things simple, let's just have the controls container lay its items out in a single row. Add the following in the style section of the template: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"#controls-container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 5px;\n  pointer-events: auto;\n  width: 75%;\n}\n",lang:"css"}),_cache[20]||(_cache[20]=(0,vue_esm_bundler.createStaticVNode)("<p>The main highlights of this are: </p><ul><li>Setting <code>display: flex</code> and <code>flex-direction: row</code> will cause the container to lay its items out in a single row</li><li> In order to not block the pointer from adjusting the WWT view, we have things in the interactive set to <code>pointer-events: none</code> by default. So in order for these to be usable, we need to be <code>pointer-events: auto</code> for the controls container. </li></ul><p> Your controls should now look something like what&#39;s below. More importantly, they should adjust the image opacities in exactly the way that we want. This example highlights the power of setting up our user interface logic using Vue - once we set up <code>crossfade</code> to control our opacities in the way that we want, hooking up UI elements with the interactions that we wanted became almost trivial. In the next part of the guide, we&#39;ll take things one step further - we&#39;ll allow showing and hiding the images, and even update our UI based on whether the images are visible or not! </p>",3)),(0,vue_esm_bundler.createVNode)(_component_v_img,{src:(0,vue_esm_bundler.unref)(controlsURL)},null,8,["src"])])}}}),OpacityControls=OpacityControlsvue_type_script_setup_true_lang_ts;OpacityControlsvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"OpacityControls",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/OpacityControls.vue"]};const TopButtonsvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"TopButtons",setup:function(__props){var topButtonsImageURL=__webpack_require__("./src/stories/assets/top-buttons.png");return function(_ctx,_cache){var _component_v_alert=(0,vue_esm_bundler.resolveComponent)("v-alert"),_component_v_img=(0,vue_esm_bundler.resolveComponent)("v-img");return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,[_cache[11]||(_cache[11]=(0,vue_esm_bundler.createElementVNode)("h1",null,"Show/Hide Images and Reset View",-1)),_cache[12]||(_cache[12]=(0,vue_esm_bundler.createElementVNode)("p",null," Now that we've got the crossfading functionality set up, we want to add a couple more convenience buttons for our users. In particular, we have two in the Carina story: a button that will turn both images on/off, and a button that will reset the WWT camera back to the starting view. It turns out that the camera-reset button will be simpler, so let's start with that. ",-1)),_cache[13]||(_cache[13]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Similar to with the controls, we'll place these buttons in a pre-existing template container - in this case we'll use the "),(0,vue_esm_bundler.createElementVNode)("code",null,"top-content"),(0,vue_esm_bundler.createTextVNode)(" container, which by default in the template looks like: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<div id="top-content">\n  <div id="left-buttons">\n    <icon-button\n      v-model="showTextSheet"\n      fa-icon="book-open"\n      :color="buttonColor"\n      :tooltip-text="showTextSheet ? \'Hide Info\' : \'Learn More\'"\n      tooltip-location="start"\n    >\n    </icon-button>\n    <icon-button\n      v-model="showVideoSheet"\n      fa-icon="video"\n      :color="buttonColor"\n      tooltip-text="Watch video"\n      tooltip-location="start"\n    >\n    </icon-button>\n  </div>\n  <div id="center-buttons">\n  </div>\n  <div id="right-buttons">\n  </div>\n</div>\n',lang:"html"}),_cache[14]||(_cache[14]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" In particular, let's put these buttons inside the "),(0,vue_esm_bundler.createElementVNode)("code",null,"center-buttons"),(0,vue_esm_bundler.createTextVNode)(" container which, as the name suggests, is in the top-center of screen. For the button that resets the view, we're going to use the toolkit's icon button component. Add the following markup inside of the "),(0,vue_esm_bundler.createElementVNode)("code",null,"center-buttons"),(0,vue_esm_bundler.createTextVNode)(" container: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<icon-button\n  fa-icon="redo"\n  :color="accentColor"\n  @activate="() => resetView(false)"\n  tooltip-text="Return to Carina"\n  tooltip-location="bottom"\n  tooltip-offset="3px"\n  :show-tooltip="!smallSize"\n></icon-button>\n',lang:"html"}),_cache[15]||(_cache[15]=(0,vue_esm_bundler.createStaticVNode)('<p> This specifies a few things: the icon that we want to use, the code that gets triggered when the button is pressed, the button color, and setup for the button tooltip. Going item-by-item: </p><ul><li><code>fa-icon=&quot;redo&quot;</code> specifies that we want the Redo icon from <a href="https://fontawesome.com/" target="_blank" rel="noopener noreferrer">Font Awesome</a>. The icon button component has built-in support for Font Awesome icons (as well as <a href="https://pictogrammers.com/library/mdi/" target="_blank" rel="noopener noreferrer">Material Design Icons</a>). </li><li><code>@activate=&quot;() =&gt; resetView(false)&quot;</code> runs when the button is pressed (causing it to emit the <code>activate</code> event). As you&#39;ll recall, we made <code>resetView</code> a standalone function in our earlier section about setting up layers. This is the reason that we defined this logic in its own function before - we can now reuse it here without needing to do anything extra. </li><li><code>:color=&quot;buttonColor&quot;</code> sets the button color to <code>buttonColor</code>, which is a predefined variable in the template (set to white by default)</li><li><code> tooltip-text=&quot;Return to Carina&quot;<br> tooltip-location=&quot;bottom&quot;<br> tooltip-offset=&quot;3px&quot;<br> :show-tooltip=&quot;!mobile&quot; </code><br> These four lines set up the tooltip for the icon button (the tooltip is text that displays when e.g. hovering over the button). The first line sets the text of the tooltip. The second sets the tooltip location relative to the button (in this case, we&#39;re setting the tooltip to diplay below the button). The third line sets the tooltip offset, which is the distance between the button and the tooltip - here we set it to 3 pixels. Finally, the last line disables the tooltip on a mobile device, where there&#39;s really no concept of &quot;hovering over&quot; an element. </li></ul><p> So this button is <em>almost</em> done, but if you try and run the story now, you&#39;ll see some errors. If the story does render, you might also see that the icon doesn&#39;t appear. There&#39;s one extra thing we need to do in order to use the icon that we want on the button. To do this, go to the <code>src/main.ts</code> file. Find the block near the top that imports some icons from Font Awesome. We need to update this to import the Redo icon as well: </p>',3)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'import {\n  faBookOpen,\n  faRedo,\n  faTimes,\n  faVideo\n} from "@fortawesome/free-solid-svg-icons";\n',lang:"javascript"}),_cache[16]||(_cache[16]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Similarly, we also need to add the icon to the local Font Awesome library. Below the import block should be a set of lines of the form "),(0,vue_esm_bundler.createElementVNode)("code",null,"library.add(...)"),(0,vue_esm_bundler.createTextVNode)(". Add one more line there: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"library.add(faRedo)",lang:"javascript"}),_cache[17]||(_cache[17]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" We also need to add our mobile device check into the main component. Go back to "),(0,vue_esm_bundler.createElementVNode)("code",null,"src/Carina.vue"),(0,vue_esm_bundler.createTextVNode)(". Find the line that imports from the CosmicDS toolkit, and change it to: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'import { BackgroundImageset, skyBackgroundImagesets, supportsTouchscreen, blurActiveElement, useWWTKeyboardControls, isMobile } from "@cosmicds/vue-toolkit";',lang:"javascript"}),_cache[18]||(_cache[18]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" This imports the "),(0,vue_esm_bundler.createElementVNode)("code",null,"isMobile"),(0,vue_esm_bundler.createTextVNode)(" convenience function from the toolkit. In order to use it in our template, define "),(0,vue_esm_bundler.createElementVNode)("code",null,"mobile"),(0,vue_esm_bundler.createTextVNode)(" as follows somewhere at the top level of the component script. We pass in the browser's user agent in order to detect what type of device they're using: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"const mobile = isMobile(window.navigator.userAgent);",lang:"javascript"}),_cache[19]||(_cache[19]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Now our reset view button should be working properly, so now let's set up our button to show and hide images. First, we need to do a little setup in the template. Similar to what we did when we set up "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)("to control our opacities, we'll create a Vue ref to control whether or not the images are shown or hidden. At the top level of the script portion of the template, add the following: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"const showLayers = ref(true);",lang:"javascript"}),_cache[20]||(_cache[20]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" So how do we want to use "),(0,vue_esm_bundler.createElementVNode)("code",null,"showLayers"),(0,vue_esm_bundler.createTextVNode)("? Also similar to "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)(", what we'll do is define a watcher that updates the WWT state to match the current value of "),(0,vue_esm_bundler.createElementVNode)("code",null,"showLayers"),(0,vue_esm_bundler.createTextVNode)(". Add the following below the watcher for "),(0,vue_esm_bundler.createElementVNode)("code",null,"crossfade"),(0,vue_esm_bundler.createTextVNode)(": ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"watch(showLayers, (show: boolean) => {\n  Object.values(layers).forEach(layer => {\n    layer.set_enabled(show);\n  });\n});\n",lang:"javascript"}),_cache[21]||(_cache[21]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" So, once again, we're able to control the state of the WWT view using our Vue template variables - we now only need to adjust the value of "),(0,vue_esm_bundler.createElementVNode)("code",null,"showLayers"),(0,vue_esm_bundler.createTextVNode)(" in order to manipulate WWT. As you're hopefully seeing, this pattern can be used to great effect. Now, let's give the user a way to change the value of "),(0,vue_esm_bundler.createElementVNode)("code",null,"showLayers"),(0,vue_esm_bundler.createTextVNode)(". Add the following directly before the reset button in the template: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<button\n  id="show-layers-button"\n  class="ui-text"\n  @click="showLayers = !showLayers"\n>\n  {{ showLayers ? "Hide Images" : "Show Images" }}\n</button>\n',lang:"html"}),(0,vue_esm_bundler.createElementVNode)("p",null,[_cache[0]||(_cache[0]=(0,vue_esm_bundler.createTextVNode)(" The pieces inside the tag should be straightforward by now - the most important thing is that on a click event, we switch the value of ")),_cache[1]||(_cache[1]=(0,vue_esm_bundler.createElementVNode)("code",null,"showLayers",-1)),_cache[2]||(_cache[2]=(0,vue_esm_bundler.createTextVNode)(", which will cause the layers to update. Inside of the button element is something new though:")),_cache[3]||(_cache[3]=(0,vue_esm_bundler.createElementVNode)("br",null,null,-1)),(0,vue_esm_bundler.createElementVNode)("code",null,(0,vue_esm_bundler.toDisplayString)("Hide Images"),1),_cache[4]||(_cache[4]=(0,vue_esm_bundler.createElementVNode)("br",null,null,-1)),_cache[5]||(_cache[5]=(0,vue_esm_bundler.createTextVNode)("This is using Vue's ")),_cache[6]||(_cache[6]=(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuejs.org/guide/essentials/template-syntax.html#text-interpolation",target:"_blank",rel:"noopener noreferrer"},"text interpolation",-1)),_cache[7]||(_cache[7]=(0,vue_esm_bundler.createTextVNode)(" capabilities to insert the value of the expression in double curly braces into the template. Here we're using a simple ternary - if ")),_cache[8]||(_cache[8]=(0,vue_esm_bundler.createElementVNode)("code",null,"showLayers.value",-1)),_cache[9]||(_cache[9]=(0,vue_esm_bundler.createTextVNode)(' is true, the button says "Hide Images"; if it\'s false, it says "Show Images". This is a simple way to allow our button to react to the current state that the user has set. '))]),_cache[22]||(_cache[22]=(0,vue_esm_bundler.createElementVNode)("p",null," Now we just need a bit of CSS to lay out the top buttons and adjust the text inside the layer control button: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:"#center-buttons {\n  display: flex;\n  flex-direction: row;\n}\n\n#show-layers-button {\n  font-size: 14pt;\n  pointer-events: auto;\n}\n",lang:"css"}),_cache[23]||(_cache[23]=(0,vue_esm_bundler.createElementVNode)("p",null," This finishes setting up the show/hide button - the user now has a simple way to control whether the images are visible, and our button even reacts to what they've done! But there's one more thing that we can do on this front to help our interactive feel more context-aware. In the previous section of this guide we added opacity controls for the images, but it doesn't really make sense to have the buttons and slider when the images aren't visible! To deal with this, find the controls container and change the opening tag to the following: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<div id="controls-container" v-if="showLayers">',lang:"html"}),_cache[24]||(_cache[24]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" This update uses Vuetify's "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuejs.org/guide/essentials/conditional.html#v-if",target:"_blank",rel:"noopener noreferrer"},"conditional rendering"),(0,vue_esm_bundler.createTextVNode)(" capabilities to only render the opacity controls when the image layers are visible. This way, the user interface is as clean as possible based on the current state. Not bad for just a few extra characters of code! ")],-1)),(0,vue_esm_bundler.createVNode)(_component_v_alert,{type:"info",variant:"tonal"},{text:(0,vue_esm_bundler.withCtx)((function(){return _cache[10]||(_cache[10]=[(0,vue_esm_bundler.createTextVNode)(" Note that Vue has another conditional rendering directive: "),(0,vue_esm_bundler.createElementVNode)("code",null,"v-show",-1),(0,vue_esm_bundler.createTextVNode)(". Which one you want to use depends on your particular interactive and what you want to do with the relevant elements. We'll defer to this discussion in the "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuejs.org/guide/essentials/conditional.html#v-if-vs-v-show",target:"_blank",rel:"noopener noreferrer"},"Vue documentation",-1),(0,vue_esm_bundler.createTextVNode)(" of which directive to use when. ")])})),_:1}),_cache[25]||(_cache[25]=(0,vue_esm_bundler.createElementVNode)("p",null,"If all went well, your top buttons should look like this:",-1)),(0,vue_esm_bundler.createVNode)(_component_v_img,{src:(0,vue_esm_bundler.unref)(topButtonsImageURL),width:"500",height:"200"},null,8,["src"]),_cache[26]||(_cache[26]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" And that's it! We've now got an interactive data story with all of the UI elements and functionality that we want. While this isn't a carbon copy of our "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://projects.cosmicds.cfa.harvard.edu/carina/",target:"_blank",rel:"noopener noreferrer"},"Carina data story"),(0,vue_esm_bundler.createTextVNode)(", it does have all of the same essential functionality. Hope ")],-1))])}}}),TopButtons=TopButtonsvue_type_script_setup_true_lang_ts;TopButtonsvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"TopButtons",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/TopButtons.vue"]};const InformationalContentvue_type_script_setup_true_lang_ts=(0,vue_esm_bundler.defineComponent)({__name:"InformationalContent",setup:function(__props){return function(_ctx,_cache){return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,[_cache[0]||(_cache[0]=(0,vue_esm_bundler.createElementVNode)("h1",null,"Informational Content",-1)),_cache[1]||(_cache[1]=(0,vue_esm_bundler.createElementVNode)("p",null," In addition to the interactive pieces of a data story, it's often also useful to have some purely instructional or educational content to help the user have a better experience with the story. Our template offers built-in mechanisms for supporting two distinct types of informational content - video and text. In this section, we'll show how to use these to help flesh out an interactive. ",-1)),_cache[2]||(_cache[2]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Let's start with the video. For the purposes of our Carina example, we'll be using a video that shows the user the basics of how to use the interactive. However, in your stories, the videos can be whatever you want - for example, they could focus more on explaining relevant scientific concepts. To insert your video into the story, look for the "),(0,vue_esm_bundler.createElementVNode)("code",null,"video"),(0,vue_esm_bundler.createTextVNode)(" element in the template. It should look something like this: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<video\n  controls\n  id="info-video"\n>\n  <source src="" type="video/mp4">\n</video>\n',lang:"html"}),_cache[3]||(_cache[3]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" As you can see, the "),(0,vue_esm_bundler.createElementVNode)("code",null,"src"),(0,vue_esm_bundler.createTextVNode)(" attribute of the video source is empty. All we need to do is fill it in! For our example, we'll use the video that we made to explain the Carina story: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<source\n  src="https://projects.cosmicds.cfa.harvard.edu/carina/media/CarinaFinal.fdf47ce7.mp4"\n  type="video/mp4"\n>\n',lang:"html"}),_cache[4]||(_cache[4]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" In this case, we're using an absolute URL to specify the video location. But you can also use a local one. For example, if you had a video file located at "),(0,vue_esm_bundler.createElementVNode)("code",null,"src/assets/MyVideo.mp4"),(0,vue_esm_bundler.createTextVNode)(", all you need to do is to specify the URL relative to the main component file. That is, you can do: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<source src="./assets/MyVideo.mp4" type="video/mp4">',lang:"html"}),_cache[5]||(_cache[5]=(0,vue_esm_bundler.createElementVNode)("p",null," Now, if you press the video icon button, our video will open in fullscreen with standard playback controls. There's also a button in the top-right of the screen to close the video. ",-1)),_cache[6]||(_cache[6]=(0,vue_esm_bundler.createElementVNode)("p",null," Next up, let's look at adding some informational text. The template has a built-in place for adding informational text, which can be opened by pressing the book icon button. Start by finding the info sheet dialog, whose opening tag looks like this: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<v-dialog\n  :style="cssVars"\n  :class="[\'info-sheet\', `info-sheet-${infoSheetLocation}`]"\n  id="text-info-sheet"\n  hide-overlay\n  persistent\n  no-click-animation\n  absolute\n  :scrim="false"\n  location="bottom"\n  v-model="showTextSheet"\n  :transition="infoSheetTransition"\n>\n',lang:"html"}),_cache[7]||(_cache[7]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" You don't really need to worry about the various settings in the dialog - they're largely there just to facilitate its setup and ensure that it opens/displays correctly. (Though if you do want to change things up, feel free to look at the "),(0,vue_esm_bundler.createElementVNode)("a",{href:"https://vuetifyjs.com/en/components/dialogs/",target:"_blank",rel:"noopener noreferrer"},"documentation"),(0,vue_esm_bundler.createTextVNode)(" for Vuetify's dialog component). But this is where we'll put our informational content. By default the information window is set up to have two tabs - one for story-specific content, and another that's pre-populated with information about how to control the WWT display. The WWT control descriptions are context-aware and will update based on whether the current device has a touchscreen or not. The tabs and the window that displays the content are connected via their "),(0,vue_esm_bundler.createElementVNode)("code",null,"v-model"),(0,vue_esm_bundler.createTextVNode)(", which is the "),(0,vue_esm_bundler.createElementVNode)("code",null,"tab"),(0,vue_esm_bundler.createTextVNode)(" variable - again, put simply, we've already hooked up the connections so that selecting a tab updates which window is visible. ")],-1)),_cache[8]||(_cache[8]=(0,vue_esm_bundler.createElementVNode)("p",null," The window that's intended for story-specific information looks like this: ",-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<v-window-item>\n  <v-card class="no-bottom-border-radius scrollable">\n    <v-card-text class="info-text no-bottom-border-radius">\n      Information goes here\n      <v-spacer class="end-spacer"></v-spacer>\n    </v-card-text>\n  </v-card>\n</v-window-item>\n',lang:"html"}),_cache[9]||(_cache[9]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" There are some classes here to set up styling, as well as an ending spacer to give a bit of padding to the bottom of the content automatically. The "),(0,vue_esm_bundler.createElementVNode)("code",null,"Information goes here"),(0,vue_esm_bundler.createTextVNode)(" is, of course, where we want to put our info. Since we're writing directly into the template, we can put whatever we want here - HTML, other Vue components, etc. ")],-1)),_cache[10]||(_cache[10]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" Obviously, you'll need to write the informational content for your stories. But, to finish out our Carina example, here's what we have inside of the "),(0,vue_esm_bundler.createElementVNode)("code",null,"v-card-text"),(0,vue_esm_bundler.createTextVNode)(" tag inside of the Carina story: ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'<h4>Explore!</h4>\nAs scientists, we learn by observing and noticing. Explore these images of the <a href="https://webbtelescope.org/contents/media/images/2022/031/01G77PKB8NKR7S8Z6HBXMYATGJ" target="_blank" rel="noopener noreferrer">Carina Nebula</a> and see what you can find.<br>\n• Look for stars that are “invisible” to our eyes because they are blocked by dust but shine in JWST’s infrared image.<br>\n• Look near the edge of the dusty, dense clouds in the JWST image. See if you can find bright yellow arcs that indicate gas and dust being blown away by young forming stars.<br>\n• Scan the dark blue region of the JWST image and see if you can find reddish smudgy objects that might be galaxies. Switch over to the Hubble image. Do you see those galaxies in the Hubble image?<br>\n<br>\n<h4>Images as “data”</h4>\nWhen you think about scientific data, pictures might not immediately spring to mind, but in astronomy, images are some of the most important pieces of data available.\n<br><br>\nImages show us the structure of objects in space, which here provides clues on how stars form and evolve. In the Hubble and JWST images of the Carina Nebula, you can see regions of very high density dust and gas (the brown parts of the images) where new stars are being born. If you zoom out, you will see that the images are at the edge of what appears to be a larger bubble, which is the cavern of lower density gas carved out by winds from massive stars.\n<br><br>\n<h4>Visible vs Infrared Light</h4>\nOur eyes can detect visible light, but visible light is only a small part of a broader <a href="https://hubblesite.org/contents/articles/the-electromagnetic-spectrum" target="_blank" rel="noopener noreferrer">spectrum</a> of light that has different energies, ranging from gamma rays and x-rays to infrared light and radio waves. Images from each part of the spectrum can tell a different part of the story about objects in space.\n<br><br>\nThe Hubble Space Telescope takes pictures in visible light, like our eyes. The James Webb Space Telescope takes pictures in infrared light. Some “night vision” cameras image objects in the dark using infrared light. Animals and people “glow” in infrared in the dark because we usually have higher temperatures than our surroundings.\n<br><br><br>\n<h3>Credits:</h3>\n<h4><a href="https://www.cosmicds.cfa.harvard.edu/" target="_blank" rel="noopener noreferrer">CosmicDS</a> Team:</h4>\nJon Carifio<br>\nJohn Lewis<br>\nPat Udomprasert<br>\nAlyssa Goodman<br>\nMary Dussault<br>\nEvaluator: Sue Sunbury<br>\n<br>\n<h4>WorldWide Telescope Team:</h4>\nPeter Williams<br>\nA. David Weigel<br>\nJon Carifio<br>\n<br>\n<funding-acknowledgment/>\n',lang:"html"}),_cache[11]||(_cache[11]=(0,vue_esm_bundler.createElementVNode)("p",null,[(0,vue_esm_bundler.createTextVNode)(" By default, this dialog will open from the right on desktop-sized screens, and from the bottom when the form factor is more akin to a phone, which we find provides a good experience as the dialog is opened along the longer dimension of the screen. However, if you'd like the dialog to open from the bottom on a desktop screen as well, you can find the (already-defined) "),(0,vue_esm_bundler.createElementVNode)("code",null,"widescreenInfoLocation"),(0,vue_esm_bundler.createTextVNode)(" variable and change its value from "),(0,vue_esm_bundler.createElementVNode)("code",null,'"right"'),(0,vue_esm_bundler.createTextVNode)(" to "),(0,vue_esm_bundler.createElementVNode)("code",null,'"bottom'),(0,vue_esm_bundler.createTextVNode)(": ")],-1)),(0,vue_esm_bundler.createVNode)(CodeBlock,{code:'const widescreenInfoLocation = ref<"right" | "bottom">("bottom");',lang:"javascript"}),_cache[12]||(_cache[12]=(0,vue_esm_bundler.createElementVNode)("p",null," At this point, we're just about done! We have a working interactive with all of the UI elements and functionality that we want. In the next section we'll do some final bits of styling to finish things off. ",-1))])}}}),InformationalContent=InformationalContentvue_type_script_setup_true_lang_ts;InformationalContentvue_type_script_setup_true_lang_ts.__docgenInfo={exportName:"default",displayName:"InformationalContent",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/InformationalContent.vue"]};const script={},AdditionalResources_exports_=(0,__webpack_require__("./node_modules/@storybook/preset-vue3-webpack/node_modules/vue-loader/dist/exportHelper.js").A)(script,[["render",function render(_ctx,_cache){return(0,vue_esm_bundler.openBlock)(),(0,vue_esm_bundler.createElementBlock)("div",null,_cache[0]||(_cache[0]=[(0,vue_esm_bundler.createStaticVNode)('<h1>Additional Resources</h1><p> We hope that this guide has provided a helpful example of how to build a data story using the CosmicDS toolkit and template. If you&#39;re interested in digging deeper into some of these topics, here are some additional resources that we&#39;d recommend: </p><ul><li>The components section of this page has detailed descriptions of each of the components in the CosmicDS toolkit.</li><li>Vue has a great <a href="https://vuejs.org/guide/introduction.html" target="_blank" rel="noopener noreferrer">documentation page</a> with learning about all of the features of Vue.</li><li>The Vuetify <a href="https://vuetifyjs.com/en/" target="_blank" rel="noopener noreferrer">documentation</a> has a description of each component, with examples and an API reference.</li><li>For general web programming, the <a href="https://developer.mozilla.org/en-US/" target="_blank" rel="noopener noreferrer">Mozilla Developer Network</a> has great resources.</li><li>For more details on TypeScript, the <a href="https://www.typescriptlang.org/docs/handbook/intro.html" target="_blank" rel="noopener noreferrer">TypeScript Handbook</a> is a great place to start.</li></ul>',3)]))}]]),AdditionalResources=AdditionalResources_exports_;AdditionalResources_exports_.__docgenInfo={displayName:"AdditionalResources",description:"",tags:{},sourceFiles:["/home/runner/work/vue-toolkit/vue-toolkit/src/stories/docs/AdditionalResources.vue"]};__webpack_require__("./src/stories/docs/docs.css");const CreatingAStory_stories={component:CreatingTheProject,title:"Documentation/Creating a Story"};var storyParameters={options:{bottomPanelHeight:0,rightPanelWidth:0}},CreateProject={name:"Creating the Project",parameters:storyParameters,render:function(){return{components:{CreatingTheProject},template:"<CreatingTheProject/>"}}},CreateSplash={name:"Splash Screen",parameters:storyParameters,render:function(){return{components:{CreateSplashScreen},template:"<CreateSplashScreen/>"}}},SetUpLayers={name:"Setting up the WWT View",parameters:storyParameters,render:function(){return{components:{SettingUpLayers},template:"<SettingUpLayers/>"}}},ImageOpacityControls={parameters:storyParameters,render:function(){return{components:{OpacityControls},template:"<OpacityControls/>"}}},TopButtonsSetup={name:"Convenience Buttons",parameters:storyParameters,render:function(){return{components:{TopButtons},template:"<TopButtons/>"}}},InformationalContentSetup={name:"Informational Content",parameters:storyParameters,render:function(){return{components:{InformationalContent},template:"<InformationalContent/>"}}},Resources={name:"Additional Resources",parameters:storyParameters,render:function(){return{components:{AdditionalResources},template:"<AdditionalResources/>"}}};const __namedExportsOrder=["CreateProject","CreateSplash","SetUpLayers","ImageOpacityControls","TopButtonsSetup","InformationalContentSetup","Resources"];CreateProject.parameters={...CreateProject.parameters,docs:{...CreateProject.parameters?.docs,source:{originalSource:'{\n  name: "Creating the Project",\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      CreatingTheProject\n    },\n    template: "<CreatingTheProject/>"\n  })\n}',...CreateProject.parameters?.docs?.source}}},CreateSplash.parameters={...CreateSplash.parameters,docs:{...CreateSplash.parameters?.docs,source:{originalSource:'{\n  name: "Splash Screen",\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      CreateSplashScreen\n    },\n    template: "<CreateSplashScreen/>"\n  })\n}',...CreateSplash.parameters?.docs?.source}}},SetUpLayers.parameters={...SetUpLayers.parameters,docs:{...SetUpLayers.parameters?.docs,source:{originalSource:'{\n  name: "Setting up the WWT View",\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      SettingUpLayers\n    },\n    template: "<SettingUpLayers/>"\n  })\n}',...SetUpLayers.parameters?.docs?.source}}},ImageOpacityControls.parameters={...ImageOpacityControls.parameters,docs:{...ImageOpacityControls.parameters?.docs,source:{originalSource:'{\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      OpacityControls\n    },\n    template: "<OpacityControls/>"\n  })\n}',...ImageOpacityControls.parameters?.docs?.source}}},TopButtonsSetup.parameters={...TopButtonsSetup.parameters,docs:{...TopButtonsSetup.parameters?.docs,source:{originalSource:'{\n  name: "Convenience Buttons",\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      TopButtons\n    },\n    template: "<TopButtons/>"\n  })\n}',...TopButtonsSetup.parameters?.docs?.source}}},InformationalContentSetup.parameters={...InformationalContentSetup.parameters,docs:{...InformationalContentSetup.parameters?.docs,source:{originalSource:'{\n  name: "Informational Content",\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      InformationalContent\n    },\n    template: "<InformationalContent/>"\n  })\n}',...InformationalContentSetup.parameters?.docs?.source}}},Resources.parameters={...Resources.parameters,docs:{...Resources.parameters?.docs,source:{originalSource:'{\n  name: "Additional Resources",\n  parameters: storyParameters,\n  render: () => ({\n    components: {\n      AdditionalResources\n    },\n    template: "<AdditionalResources/>"\n  })\n}',...Resources.parameters?.docs?.source}}}},"./src/stories/docs/docs.css":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{var _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js"),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js"),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js"),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js"),_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_clonedRuleSet_8_use_1_docs_css__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??clonedRuleSet-8.use[1]!./src/stories/docs/docs.css"),options={};options.styleTagTransform=_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default(),options.setAttributes=_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default(),options.insert=_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null,"head"),options.domAPI=_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default(),options.insertStyleElement=_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();_node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_clonedRuleSet_8_use_1_docs_css__WEBPACK_IMPORTED_MODULE_6__.A,options),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_clonedRuleSet_8_use_1_docs_css__WEBPACK_IMPORTED_MODULE_6__.A&&_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_clonedRuleSet_8_use_1_docs_css__WEBPACK_IMPORTED_MODULE_6__.A.locals&&_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_clonedRuleSet_8_use_1_docs_css__WEBPACK_IMPORTED_MODULE_6__.A.locals}}]);